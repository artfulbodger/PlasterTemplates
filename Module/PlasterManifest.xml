<?xml version="1.0" encoding="utf-8"?>
<plasterManifest schemaVersion="1.1" templateType="Project"
  xmlns="http://www.microsoft.com/schemas/PowerShell/Plaster/v1">
  <metadata>
    <name>CustomModulePlasterTemplate</name>
    <id>02755a33-cae6-4cbd-8f3c-c34d385a7a96</id>
    <version>2.0</version>
    <title>Rich Carpenter Plaster Template</title>
    <description></description>
    <author>Rich Carpenter</author>
    <tags></tags>
  </metadata>
  <parameters>
    <parameter name="ModuleName" type="text" prompt="Name of your Module" />
    <parameter name="ModuleDesc" type="text" prompt="Brief Decription of this module" />
    <parameter name="ModuleVersion" type="text" prompt="Version number" default='0.0.0.1' />
    <parameter name="ModuleAuthor" type="user-fullname" prompt="Author" />
    <parameter name="FunctionFolders" type="multichoice" prompt="Include module folder structure" default="0,1">
      <choice label='&amp;Public' value='Public' help='Adds a public folder to module root'/>
      <choice label='&amp;Internal' value='Internal' help='Adds a internal folder to module root'/>
      <choice label='&amp;Classes' value='Classes' help='Adds a classes folder to module root'/>
      <choice label='&amp;Binaries' value='Binaries' help='Adds a binaries folder to module root'/>
      <choice label='&amp;DSCResources' value='DSCResources' help='Adds a DSCResource folder to module root'/>
    </parameter>
    <parameter name="Pester" type="choice" prompt="Include Pester Tests?" default="0">
      <choice label="&amp;Yes" help="Adds a Pester Test Folder" value="Yes" />
      <choice label="&amp;No" help="Does not add Pester Test Folder" value="No" />
    </parameter>
    <parameter name='Git' type = 'choice' prompt='Include Git Support?' default='0'>
      <choice label='&amp;Yes' value='Yes' help='Includes Git files'/>
      <choice label='&amp;No' value='No' help='Does not include git files'/>
    </parameter>
    <parameter name='GitPages' type = 'choice' prompt='Include GitHub Pages Support?' default='0' condition='$PlASTER_PARAM_Git -eq "Yes"'>
      <choice label='&amp;Yes' value='Yes' help='Includes /docs folder'/>
      <choice label='&amp;No' value='No' help='Does not include /docs folder'/>
    </parameter>
    <parameter name="GitHubUser" type="text" prompt="GitHub User Name" condition='$PlASTER_PARAM_Git -eq "Yes"' />
    <parameter name="GitLicense" type="choice" prompt="Include GitHub MIT License?" condition='$PlASTER_PARAM_Git -eq "Yes"' default="0">
      <choice label="&amp;Yes" help="Adds the MIT License to the Git repo" value="Yes" />
      <choice label="&amp;No" help="Does not add the MIT License to the Git repo" value="No" />
    </parameter>
  </parameters>
  <content>
    <newModuleManifest destination='${PLASTER_PARAM_ModuleName}\${PLASTER_PARAM_ModuleName}.psd1' moduleVersion='$PLASTER_PARAM_ModuleVersion' rootModule='${PLASTER_PARAM_ModuleName}.psm1' author='$PLASTER_PARAM_ModuleAuthor' description='$PLASTER_PARAM_ModuleDesc' />
    <file source='Module.psm1' destination='${PLASTER_PARAM_ModuleName}\${PLASTER_PARAM_ModuleName}.psm1' />
    <message condition='$PLASTER_PARAM_Pester -eq "Yes"'>Setting up support for Pester</message>
    <requireModule name="Pester" minimumVersion="3.4.0" condition='$PLASTER_PARAM_Pester -eq "Yes"'/>
    <file condition='$PLASTER_PARAM_Pester -eq "Yes"' destination='Tests\' source='' />
    <file condition='$PLASTER_PARAM_Pester -eq "Yes"' destination='Tests\${PLASTER_PARAM_ModuleName}.tests.ps1' source='test\basicTests.ps1' />
    <message>Creating Function Folders</message>
    <file source='' destination='${PLASTER_PARAM_ModuleName}\Public\' condition='$PLASTER_PARAM_FunctionFolders -contains "Public"'/>
    <file source='' destination='${PLASTER_PARAM_ModuleName}\Internal\' condition='$PLASTER_PARAM_FunctionFolders -contains "Internal"'/>
    <file source='' destination='${PLASTER_PARAM_ModuleName}\Classes\' condition='$PLASTER_PARAM_FunctionFolders -contains "Classes"'/>
    <file source='' destination='${PLASTER_PARAM_ModuleName}\Binaries\' condition='$PLASTER_PARAM_FunctionFolders -contains "Binaries"'/>
    <file source='' destination='${PLASTER_PARAM_ModuleName}\DSCResources\' condition='$PLASTER_PARAM_FunctionFolders -contains "DSCResources"'/>
    <message condition='$PlASTER_PARAM_GitPages -eq "Yes"'>Creating Docs Folder</message>
    <file source='' destination='docs\' condition='$PlASTER_PARAM_GitPages -eq "Yes"'/>
    <templateFile source='README.aps1' destination='docs\index.md' condition='$PlASTER_PARAM_GitPages -eq "Yes"'/>
    <templateFile condition='$PlASTER_PARAM_GitPages -eq "Yes"' source='github\_config.ayml' destination='docs\_config.yml'/>
    <message>Setting VSCODE as Editor</message>
    <file source='editor\VSCode\tasks.json' destination='.vscode\tasks.json' />
    <file source='editor\VSCode\settings.json' destination='.vscode\settings.json' />
    <message condition='$PlASTER_PARAM_Git -eq "Yes"'>Setting up support for Git</message>
    <file condition='$PlASTER_PARAM_Git -eq "Yes"' source='github\.gitignore' destination='.gitignore' />
    <templateFile condition='$PlASTER_PARAM_Git -eq "Yes"' source='README.aps1' destination='README.md'/>
    <templateFile condition='$PlASTER_PARAM_Git -eq "Yes"' source='github\bug_report.amd' destination='.github\ISSUE_TEMPLATE\bug_report.md'/>
    <templateFile condition='$PlASTER_PARAM_Git -eq "Yes"' source='github\feature_request.amd' destination='.github\ISSUE_TEMPLATE\feature_request.md'/>
    <templateFile condition='$PlASTER_PARAM_GitLicense -eq "Yes"' source='github\LICENSE.amd' destination='LICENSE.md' />
  </content>
</plasterManifest>